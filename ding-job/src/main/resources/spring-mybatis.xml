<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="     
           http://www.springframework.org/schema/beans     
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"
           default-lazy-init="true">
    
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />
        <!-- mybatis的相关配置 --> 
        <property name="configLocation" value="classpath:mybatis-config.xml"/> 
        <!-- 自动扫描dao.xml文件 -->  
        <property name="mapperLocations" value="classpath:/mybatis/**/*.xml"></property>
    </bean>
    
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.dreamaker.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
    
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 设置它的属性 -->
        <tx:attributes>
            <tx:method name="get*" read-only="true" propagation="REQUIRED" />
             <tx:method name="find*" read-only="true" propagation="REQUIRED" />
              <tx:method name="select*" read-only="true" propagation="REQUIRED" />
             <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
             <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    
    <!-- <aop:config/> 的定义，确保由txAdvice bean定义的事务通知在应用中具体点被执行 -->
    <aop:config>
        <aop:pointcut id="ServiceMethod" expression="execution(* com.dreamaker.service.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="ServiceMethod"/>
    </aop:config>
    
</beans>