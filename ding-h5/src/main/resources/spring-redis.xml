<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:c="http://www.springframework.org/schema/c"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:int-redis="http://www.springframework.org/schema/integration/redis"
    xmlns:redis="http://www.springframework.org/schema/redis"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xsi:schemaLocation="     
           http://www.springframework.org/schema/beans     
           http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
           http://www.springframework.org/schema/integration/redis 
           http://www.springframework.org/schema/integration/redis/spring-integration-redis-3.0.xsd
           http://www.springframework.org/schema/redis 
           http://www.springframework.org/schema/redis/spring-redis-1.0.xsd
           http://www.springframework.org/schema/cache 
           http://www.springframework.org/schema/cache/spring-cache-4.3.xsd"
           default-lazy-init="true">
	
    <!-- 配置redis-session的过期时间 -->
    <bean id="redisHttpSessionConfiguration"  
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">  
        <property name="maxInactiveIntervalInSeconds" value="1800"/>  
    </bean>
    
	<!-- Jedis ConnectionFactory -->
	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!-- use base property or shardInfo -->
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="timeout" value="${redis.timeout}" />
		<!--<property name="shardInfo" ref="shardedJedisPool"></property> -->

		<property name="usePool" value="true" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean>

	<!-- jedis pool config -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxActive}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>
	<!-- jedis 多个服务器配置 
	<bean id="jedisShardInfo1" class="redis.clients.jedis.JedisShardInfo">
		<constructor-arg index="0" value="${redis2.ip}" />
		<constructor-arg index="1" value="${redis2.port}" type="int" />
	</bean>

	<bean id="jedisShardInfo2" class="redis.clients.jedis.JedisShardInfo">
		<constructor-arg index="0" value="${redis.ip}" />
		<constructor-arg index="1" value="${redis.port}" type="int" />
	</bean>

	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<ref bean="jedisShardInfo1" />
				<ref bean="jedisShardInfo2" />
			</list>
		</constructor-arg>
	</bean>-->

	
	
	<!-- redis 序列化策略 ，通常情况下key值采用String序列化策略， -->
	<!-- 如果不指定序列化策略，StringRedisTemplate的key和value都将采用String序列化策略； -->
	<!-- 但是RedisTemplate的key和value都将采用JDK序列化 这样就会出现采用不同template保存的数据不能用同一个template删除的问题 -->
	<!-- String序列化策略只能保存 字符串数据； -->
	<!-- <bean id="stringRedisSerializer" 
	    class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id='redisTemplate' class="org.springframework.data.redis.core.RedisTemplate">
	    <property name="connectionFactory" ref="redisConnectionFactory" />
	    <property name="keySerializer" ref="stringRedisSerializer" />
	    <property name="hashKeySerializer" ref="stringRedisSerializer" />
	    <property name="valueSerializer" ref="stringRedisSerializer"/>
		<property name="hashValueSerializer" ref="stringRedisSerializer"/>
	</bean> -->
	
	<!-- json 序列化的体积是 java序列的  1/5 倍-->
	<bean id="jackson2JsonRedisSerializer" class="com.dreamaker.util.GenericJackson2JsonRedisSerializer">
		<constructor-arg index="0" value="java.lang.String" type="java.lang.String"></constructor-arg>
	</bean>
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer">
	</bean>
	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory"></property>
		<property name="keySerializer" ref="stringRedisSerializer"/>
		<property name="valueSerializer" ref="jackson2JsonRedisSerializer"/>
		<property name="hashKeySerializer" ref="stringRedisSerializer"/>
		<property name="hashValueSerializer" ref="jackson2JsonRedisSerializer"/>
	</bean>
	
</beans>